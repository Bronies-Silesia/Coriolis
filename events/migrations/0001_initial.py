# Generated by Django 3.2.9 on 2021-12-01 22:08

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for the event.', max_length=256, verbose_name='name')),
                ('slug', models.CharField(help_text='Short name used in links.', max_length=64, verbose_name='slug')),
                ('location', models.CharField(help_text='Physical place where the event will take place.', max_length=256, verbose_name='location')),
                ('location_link', models.CharField(help_text='Link to Google Maps or OSM.', max_length=256, verbose_name='location link')),
                ('website_link', models.CharField(help_text='Link to the main event website.', max_length=256, verbose_name='website link')),
                ('date_from', models.DateTimeField(verbose_name='date from')),
                ('date_to', models.DateTimeField(verbose_name='date to')),
                ('active', models.BooleanField(default=True)),
                ('description', models.TextField(help_text='Text shown on the main page. Supports Markdown.', verbose_name='description')),
                ('ticket_code_length', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(32)], verbose_name='ticket code length')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('description', models.TextField(help_text='Shown in the ticket choice screen. Supports Markdown.', verbose_name='description')),
                ('long_description', models.TextField(help_text='Shown on the ticket purchase form. Supports Markdown.', verbose_name='long description')),
                ('code_prefix', models.CharField(blank=True, help_text='Characters in front of all the ticket codes of this type.', max_length=8, verbose_name='code prefix')),
                ('price', models.PositiveSmallIntegerField(verbose_name='price')),
                ('color', colorfield.fields.ColorField(default='#FF0000', help_text='Extra color shown on the ticket choice screen.', max_length=18, verbose_name='color')),
                ('registration_from', models.DateTimeField(verbose_name='registration from')),
                ('registration_to', models.DateTimeField(verbose_name='registration to')),
                ('self_registration', models.BooleanField(default=True, help_text='Determines if the ticket can be purchased online.', verbose_name='self-registration')),
                ('max_tickets', models.PositiveSmallIntegerField(verbose_name='max tickets')),
                ('tickets_remaining', models.PositiveSmallIntegerField(verbose_name='tickets remaining')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.event', verbose_name='event')),
            ],
            options={
                'verbose_name': 'ticket type',
                'verbose_name_plural': 'ticket types',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('CNCL', 'Cancelled'), ('WAIT', 'Waiting for Organizers'), ('OKNP', 'Ready (payment on site)'), ('OKPD', 'Ready (paid)'), ('USED', 'Used'), ('ONST', 'Used on site')], default='WAIT', max_length=4, verbose_name='status')),
                ('name', models.CharField(blank=True, max_length=256, verbose_name='name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Optional, used for notifications before/during the event', max_length=128, region=None, verbose_name='phone')),
                ('notes', models.TextField(blank=True, help_text='Optional, notes for organizers', verbose_name='notes')),
                ('code', models.PositiveIntegerField(help_text='Code printed on the ticket. Required for pickup on site.', verbose_name='code')),
                ('nickname', models.CharField(blank=True, help_text='Printed on the customized ticket', max_length=256, verbose_name='nickname')),
                ('city', models.CharField(blank=True, help_text='Printed on the customized ticket', max_length=256, verbose_name='city')),
                ('image', models.ImageField(blank=True, help_text='Printed on the customized ticket, should be cropped to a square', upload_to='', verbose_name='image')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.event', verbose_name='event')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.tickettype', verbose_name='type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'ticket',
                'verbose_name_plural': 'tickets',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend', models.CharField(max_length=16, verbose_name='backend')),
                ('data', models.JSONField(blank=True, null=True, verbose_name='data')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.event', verbose_name='event')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.ticket', verbose_name='ticket')),
            ],
            options={
                'verbose_name': 'payment',
                'verbose_name_plural': 'payments',
            },
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('slug', models.CharField(help_text='Short name used in links.', max_length=64, verbose_name='slug')),
                ('hidden', models.BooleanField(default=False, help_text='Whenever to hide this page in the page listing.', verbose_name='hidden')),
                ('content', models.TextField(help_text='Page content. Supports markdown.', verbose_name='content')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event', verbose_name='event')),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('slug', models.CharField(max_length=64, verbose_name='slug')),
                ('button_label', models.CharField(max_length=128, verbose_name='button label')),
                ('registration_from', models.DateTimeField(help_text='Date/time from which users can create these applications.', verbose_name='registration from')),
                ('registration_to', models.DateTimeField(help_text='Date/time when the form for these applications closes.', verbose_name='registration to')),
                ('description', models.TextField(help_text='Shown on the application form. Supports Markdown.', verbose_name='description')),
                ('template', models.TextField(help_text='Default contents for the application form. Does not support formatting.', verbose_name='template')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.event', verbose_name='event')),
            ],
            options={
                'verbose_name': 'application type',
                'verbose_name_plural': 'application types',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('CNCL', 'Cancelled'), ('WAIT', 'Waiting for Organizers'), ('APRV', 'Approved'), ('REJD', 'Rejected')], default='WAIT', max_length=4, verbose_name='status')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='phone')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('application', models.TextField(verbose_name='application')),
                ('org_notes', models.TextField(verbose_name='org notes')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.event', verbose_name='event')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='events.applicationtype', verbose_name='type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'application',
                'verbose_name_plural': 'applications',
            },
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['event', 'code'], name='events_tick_event_i_8a2f73_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['event', 'name'], name='events_tick_event_i_e6e80d_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['event', 'email'], name='events_tick_event_i_fe1183_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ticket',
            unique_together={('event', 'code')},
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['event', 'user'], name='events_appl_event_i_06fba5_idx'),
        ),
    ]
